{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["props","useState","message","setMessage","nextMessage","setNextMessage","count","setCount","speed","setSpeed","time","setTime","pauseTime","setPauseTime","steps","setSteps","phrases","setPhrases","chars","char","Math","index","useEffect","interval","setInterval","i","item","swapLetters","stepOne","removeSymbols","addSymbols","swapSymbols","stepThree","nextWord","clearInterval","JSXify","jsx","className","styles","App","darkTheme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bef4fe2.chunk.js","sourcesContent":["/* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from 'react'\nimport styles from './styles.module.css'\n\nfunction TextScrambler(props) {\n  const [message, setMessage] = useState(props.phrases[0])\n  const [nextMessage, setNextMessage] = useState(props.phrases[1])\n  const [count, setCount] = useState(0)\n  const [speed, setSpeed] = useState(80)\n  const [time, setTime] = useState(1000)\n  const [pauseTime, setPauseTime] = useState(1000)\n  const [steps, setSteps] = useState([false, false, false])\n  const [phrases, setPhrases] = useState()\n  const chars = '!<>-_\\\\/[]{}â€”=+*^?#________'\n\n\n\n  function swapLetters() {\n    const char = chars[Math.floor(Math.random() * chars.length)]\n    while (true) {\n      const index = Math.floor(Math.random() * message.length)\n      if (!chars.includes(message[index])) {\n        setMessage(\n          message.substring(0, index) +\n          char +\n          message.substring(index + 1)\n        )\n        break\n      }\n    }\n  }\n\n  function swapSymbols() {\n    while (true) {\n      const index = Math.floor(Math.random() * message.length)\n      if (chars.includes(message[index])) {\n        setMessage(\n          message.substring(0, index) +\n          nextMessage[index] +\n          message.substring(index + 1)\n        )\n        break\n      }\n    }\n  }\n\n  function removeSymbols() {\n    const index = Math.floor(Math.random() * message.length)\n    setMessage(message.substring(0, index) + message.substring(index + 1))\n  }\n\n  function addSymbols() {\n    const char = chars[Math.floor(Math.random() * chars.length)]\n    const index = Math.floor(Math.random() * message.length)\n    if (index !== 0) {\n      setMessage(message.substring(0, index) + char + message.substring(index))\n    } else {\n      setMessage(char + message.substring(0))\n    }\n  }\n\n  function stepOne(item) {\n    for (let i = 0; i < item.length; i++) {\n      if (!chars.includes(item[i])) {\n        swapLetters()\n        return 1\n      }\n    }\n    return 0\n  }\n\n  function stepThree(item) {\n    for (let i = 0; i < item.length; i++) {\n      if (chars.includes(item[i])) {\n        swapSymbols()\n        break\n      }\n    }\n  }\n\n  function nextWord(index, word) {\n    setCount(index)\n    setNextMessage(phrases[word])\n    setSteps([false, false, false])\n  }\n\n  useEffect(() => {\n    if (props.speed !== undefined) {\n      setSpeed(props.speed)\n    }\n    if (props.pauseTime !== undefined) {\n      setPauseTime(props.pauseTime)\n    }\n    if (props.phrases !== undefined) {\n      setPhrases(props.phrases)\n    } else {\n      return <div>phrases missing/incomplete/incorrect format</div>\n    }\n\n    const interval = setInterval(() => {\n      setTime(speed)\n\n      if (message !== nextMessage) {\n        if (!steps[0]) {\n          if (stepOne(message) === 0) {\n            setSteps([true, false, false])\n          }\n        }\n\n        if (steps[0] && !steps[1]) {\n          if (message.length > nextMessage.length) {\n            removeSymbols()\n          }\n          if (message.length < nextMessage.length) {\n            addSymbols()\n          }\n          if (message.length === nextMessage.length) {\n            setSteps([true, true, false])\n          }\n        }\n\n        if (steps[1] && !steps[2]) {\n          stepThree(message)\n        }\n      } else {\n        setTime(pauseTime)\n        if (count === phrases.length - 2) {\n          nextWord(phrases.length - 1, 0)\n        }\n        if (count === phrases.length - 1) {\n          nextWord(0, 1)\n        }\n        if (count < phrases.length - 2) {\n          nextWord(count + 1, count + 2)\n        }\n      }\n    }, time)\n    return () => clearInterval(interval)\n  })\n\n  const JSXify = (item) => {\n    if (message != null) {\n      var jsx = []\n      for (let i = 0; i < item.length; i++) {\n        if (chars.includes(item[i])) {\n          jsx.push(<span className={styles.symbol}>{item[i]}</span>)\n        } else {\n          jsx.push(<span>{item[i]}</span>)\n        }\n      }\n      return jsx\n    }\n  }\n  if (props.darkTheme) {\n    return <div className={styles.darkTheme}>{JSXify(message)}</div>\n  }\n  else {\n    return <div className={styles.normalTheme}>{JSXify(message)}</div>\n  }\n\n}\n\nexport default TextScrambler\n","import React from 'react'\n\nimport TextScrambler from 'react-scramble-text'\nimport 'react-scramble-text/dist/index.css'\n\nconst App = () => {\n  const phrases = [\"Hello\", \"My name is\", \"Caleb Northcott\", \"and I am\", \"Sick of this shit\"]\n  return <TextScrambler phrases={phrases}\n    darkTheme={false} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}